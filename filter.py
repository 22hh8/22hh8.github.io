# Image filtering utilities needed for CS134, Lab 7.
# (c) 2018 duane a. bailey
"""
This module supports primitive PIL image filtering.

A filter takes 'before' pixels---pixels from a base image---and transforms 
them into 'after' pixels.  As filters are composed, the 'after' pixels of
earlier filters become the basis for 'before' pixels in later filters.

The Filter class describes basic interface for our image filters:
    f.width - width of the image produced by the filter
    f.height - height of image produced by filter
    f.before(x,y) - the pixel Color at (x,y) *before* this filter is applied
    f.after(x,y) - the pixel Color at (x,y) *after* this filter is applied
    f.image() - a new PIL image generated by the 'after' pixels.

All filters can be applied directly to a PIL Image.  This is typically done
with code like:
    irises = Image.open('images/Irises.png')
    f = GrayFilter(irises)
    grayIrises = f.image()
    grayIrises.save('GrayIrises.png')
If run as a script, this modules executes the above code.

The PlainFilter is a clear filter: no transformation happens.

The GrayFilter converts a color image to a grayscale image: r,g,b values are
all the same.
"""
from PIL import Image, ImageDraw

__all__ = ['Color', 'Filter', 'PlainFilter', 'GrayFilter',
           'hsv2rgb', 'rgb2hsv', 'WHITE', 'BLACK']

# some simple colors

def _clamp(low,value,high):
    """Clamp value to low or high as necessary."""
    result = value if value >= low else low
    result = value if value <= high else high
    return result

class Color(object):
    """A description of a color.

    Colors may be initialized with RGB (model = 'rgb') or HSV (model = 'hsv').
    Colors may be queried for red(), green(), blue(), hue(), saturation(),
    and value().
    """
    __slots__ = [ '_red', '_green', '_blue' ]

    def __init__(self, c = None, model = None, scale = 1):
        """Construct a color from HSV/RGB values."""
        if c is None:
            c = (0,0,0)
        if isinstance(c,Color):
            c = c.raw()
            model = None
            scale = 1
        if model is None:
            model = 'rgb'
        if model.lower() == 'hsv':
            c = hsv2rgb(c)
            scale = 1
        (r,g,b) = c
        self._red = _clamp(0,r/scale,1)
        self._green = _clamp(0,g/scale,1)
        self._blue = _clamp(0,b/scale,1)

    def red(self):
        """Return red component."""
        return self._red

    def green(self):
        """Return green component."""
        return self._green

    def blue(self):
        """Return blue component."""
        return self._blue

    def hue(self):
        """Return hue."""
        return self.hsv()[0]

    def saturation(self):
        """Return saturation."""
        return self.hsv()[1]

    def value(self):
        """Return value component."""
        return self.hsv()[2]

    def rgb(self):
        """Return RGB color values."""
        return ( self.red(), self.green(), self.blue() )

    def raw(self,scale=255):
        """Return RGB color values scaled to 0..scale (as used in PIL)."""
        r = _clamp(0,int(round(self.red()*scale)),scale)
        g = _clamp(0,int(round(self.green()*scale)),scale)
        b = _clamp(0,int(round(self.blue()*scale)),scale)
        return ( r,g,b )

    def hsv(self):
        """Return HSV color equivalent values."""
        return rgb2hsv( self.rgb() )

    def __eq__(self,other):
        """Determine if two colors are equal."""
        return self.rgb() == other.rgb()

    def __str__(self):
        """A string representation of this color."""
        return str(self.rgb())

    def __repr__(self):
        """The eval-able representation of this color."""
        return "Color({})".format(self.rgb())

def hsv2rgb(c):
   """Convert an hsv color to rgb."""
   h,s,v = c
   h = h%360
   h = 6*((h/360)%1)
   i = int(h)
   f = h-i
   p = v*(1-s)
   q = v*(1-s*f)
   t = v*(1-s*(1-f))
   if (i==6) or (i==0):
      return (v,t,p)
   elif i == 1:
      return (q,v,p)
   elif i == 2:
      return (p,v,t)
   elif i == 3:
      return (p,q,v)
   elif i == 4:
      return (t,p,v)
   elif i == 5:
      return (v,p,q)
   else:
      return i

def rgb2hsv(c):
   """Convert an RGB color to HSV."""
   r,g,b = c
   v = max(r,g,b)
   mn = min(r,g,b)
   range = v-mn
   if v == mn:
      h = 0
   elif v == r:
      h = 60*(g-b)/range+(0 if g >= b else 360)
   elif v == g:
      h = 60*(b-r)/range+120
   else:
      h = 60*(r-g)/range+240
   s = 0 if v == 0 else 1-mn/v
   return (h,s,v)

WHITE = Color((1,1,1))
BLACK = Color((0,0,0))

class Filter(object):
    """The base of all filter classes."""
    __slots__ = ['_width', '_height']

    @property
    def width(self):
        """The width of the image produced by this filter."""
        return self._width

    @property
    def height(self):
        """The height of the image produced by this filter."""
        return self._height

    def before(self,x,y):
        """Access to pixels this filter is based on."""
        if 0 <= x < self.width and 0 <= y < self.height:
            return Color(self._px[x,y][:3],model="rgb",scale=255)
        else:
            return WHITE
    
    def after(self,x,y):
        """The pixels produces by this filter."""
        return self.before(x,y)

    def image(self):
        """Generate an image from this filter."""
        i = Image.new("RGB",(self.width,self.height),WHITE.raw())
        for x in range(i.width):
            for y in range(i.height):
                ImageDraw.Draw(i).point((x,y),self.after(x,y).raw())
        return i

class _Img(Filter):
    """A trivial filter whose result is just the pixels of a base image."""
    __slots__ = ['_image', '_px']

    def __init__(self,i):
        self._image = i
        self._width,self._height = i.size
        self._px = i.load()

class PlainFilter(Filter):
    """A clear filter: before and after pixels are the same."""
    __slots__ = ['_base', '_px']

    def __init__(self,base):
        """Initialize clear filter: only base Image/Filter needed."""
        if isinstance(base,Image.Image):
            base = _Img(base)
        self._base = base
        self._px = None
        self._width = base.width
        self._height = base.height

    def before(self,x,y):
        """Pixel (x,y) value before filter is applied."""
        if 0 <= x < self.width and 0 <= y < self.height:
            return self._base.after(x,y)
        else:
            return WHITE

class GrayFilter(PlainFilter):
    """This filter converts a color image to a monochrome image."""
    
    def __init__(self, base):
        """Initialize gray filter: only base Image/Filter needed."""
        super().__init__(base)

    def after(self,x,y):
        """Pixels after gray-filtering."""
        (r,g,b) = self.before(x,y).rgb()
        gr = (r+g+b)/3
        c = Color((gr,gr,gr))
        return c

if __name__ == "__main__":
    irises = Image.open('images/Irises.png')
    g = GrayFilter(irises)
    grayIrises = g.image()
    grayIrises.save('GrayIrises.png')

    
